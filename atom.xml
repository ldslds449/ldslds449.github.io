<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>公貓</title>
  
  
  <link href="http://ldslds449.github.io/atom.xml" rel="self"/>
  
  <link href="http://ldslds449.github.io/"/>
  <updated>2021-03-21T05:18:40.603Z</updated>
  <id>http://ldslds449.github.io/</id>
  
  <author>
    <name>ldslds449</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SmartPointer</title>
    <link href="http://ldslds449.github.io/2021/03/21/SmartPointer/"/>
    <id>http://ldslds449.github.io/2021/03/21/SmartPointer/</id>
    <published>2021-03-21T05:18:06.000Z</published>
    <updated>2021-03-21T05:18:40.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-Smart-Pointer"><a href="#C-Smart-Pointer" class="headerlink" title="C++ Smart Pointer"></a>C++ Smart Pointer</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-Smart-Pointer&quot;&gt;&lt;a href=&quot;#C-Smart-Pointer&quot; class=&quot;headerlink&quot; title=&quot;C++ Smart Pointer&quot;&gt;&lt;/a&gt;C++ Smart Pointer&lt;/h1&gt;</summary>
      
    
    
    
    
    <category term="C++" scheme="http://ldslds449.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>圖片簡單旋轉 - Image Rotate</title>
    <link href="http://ldslds449.github.io/2020/09/16/ImageRotate/"/>
    <id>http://ldslds449.github.io/2020/09/16/ImageRotate/</id>
    <published>2020-09-16T00:37:52.000Z</published>
    <updated>2020-09-30T18:06:14.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="圖片旋轉"><a href="#圖片旋轉" class="headerlink" title="圖片旋轉"></a>圖片旋轉</h1><p>在這邊紀錄一下簡單的圖片旋轉方式。</p><h2 id="旋轉矩陣"><a href="#旋轉矩陣" class="headerlink" title="旋轉矩陣"></a>旋轉矩陣</h2><p>首先先介紹旋轉矩陣：$\begin{bmatrix}cos(\theta) &amp; -sin(\theta) \\ sin(\theta) &amp; cos(\theta)\end{bmatrix}$ 其中，$\theta$為旋轉的角度。 </p><p>這矩陣的由來可以從合角公式的地方看到：</p><p>$$ sin(\alpha + \beta) = sin(\alpha)cos(\beta) + cos(\alpha)sin(\beta) \\<br>sin(\alpha - \beta) = sin(\alpha)cos(\beta) - cos(\alpha)sin(\beta) \\<br>cos(\alpha + \beta) = cos(\alpha)cos(\beta) - sin(\alpha)sin(\beta) \\<br>cos(\alpha - \beta) = cos(\alpha)cos(\beta) + sin(\alpha)sin(\beta) $$</p><p>下方圖中 $\theta_1$ 為 $30^{\circ}$，因此綠色向量為 $(cos(30^{\circ}),sin(30^{\circ})) = (\sqrt 3 /2,0.5)$。</p><img src="/2020/09/16/ImageRotate/rotate_xy_1.svg" class=""><p>如今逆時針旋轉了 $30^{\circ}$，如下圖。<br>下方圖中 $\theta_1$ 為 $30^{\circ}$ 且 $\theta_2$ 也為 $30^{\circ}$。<br>因此橘色向量為 $(cos(60^{\circ}), sin(60^{\circ})) = (0.5, \sqrt 3 /2)$。</p><img src="/2020/09/16/ImageRotate/rotate_xy_2.svg" class=""><p>我們可以將 $\theta_1$ 和 $\theta_2$ 帶入合角公式驗證看看：<br>$$ cos(30 + 30) = cos(30)cos(30) - sin(30)sin(30) = 0.5 \\<br>sin(30 + 30) = sin(30)cos(30) + cos(30)sin(30) = \sqrt 3 /2 $$</p><p>結果和現實的一樣。</p><p>那現在我們將原本的綠色向量一般化，改用未知數代替：向量為 $(x,y)$、角度為 $\theta_0$。<br>如今要旋轉 $\theta$ 度，成為新的向量 $(x’, y’)$。<br>完成之後替換一下合角公式。<br>$$ cos(\theta_0 + \theta) = cos(\theta_0)cos(\theta) - sin(\theta_0)sin(\theta) \\<br>sin(\theta_0 + \theta) = sin(\theta_0)cos(\theta) + cos(\theta_0)sin(\theta) $$</p><p>其中<br>$cos(\theta)$ 為 $x$；$sin(\theta)$ 為 $y$。<br>$cos(\theta_0 + \theta)$ 為 $x’$；$sin(\theta_0 + \theta)$ 為 $y’$。<br>因此又可以寫成：<br>$$ x’ = x\times cos(\theta) - y\times sin(\theta) \\<br>y’ = y\times cos(\theta) + x\times sin(\theta) $$</p><p>接下來我們將此化成矩陣的形式：<br>$$\begin{bmatrix} x\times cos(\theta) - y\times sin(\theta) \\ y\times cos(\theta) + x\times sin(\theta) \end{bmatrix}<br>= \begin{bmatrix} x’ \\ y’ \end{bmatrix} $$</p><p>最後將矩陣下方的 row 交換位子之後，將 $x$ 和 $y$ 提出來：<br>$$\begin{bmatrix} x\times cos(\theta) - y\times sin(\theta) \\ y\times cos(\theta) + x\times sin(\theta) \end{bmatrix}<br>= \begin{bmatrix} x\times cos(\theta) - y\times sin(\theta) \\ x\times sin(\theta) + y\times cos(\theta) \end{bmatrix}<br>= \begin{bmatrix} cos(\theta) - sin(\theta) \\ sin(\theta) + cos(\theta) \end{bmatrix}<br>\begin{bmatrix} x \\ y \end{bmatrix}<br>= \begin{bmatrix} x’ \\ y’ \end{bmatrix} $$</p><p>旋轉矩陣就誕生了~~</p><p>$$\begin{bmatrix} cos(\theta) - sin(\theta) \\ sin(\theta) + cos(\theta) \end{bmatrix}<br>\begin{bmatrix} x \\ y \end{bmatrix}<br>= \begin{bmatrix} x’ \\ y’ \end{bmatrix} $$</p><h2 id="轉換"><a href="#轉換" class="headerlink" title="轉換"></a>轉換</h2><p>經過剛剛的介紹，要求出新的座標 $\begin{bmatrix}x’ \\ y’\end{bmatrix}$ ，可以將原本的座標 $\begin{bmatrix}x \\ y\end{bmatrix}$ 乘上旋轉矩陣，也就是：  </p><p>$$\begin{bmatrix}cos(\theta) &amp; -sin(\theta)\\sin(\theta) &amp; cos(\theta)\end{bmatrix}<br>\begin{bmatrix}x \\ y\end{bmatrix}<br>= \begin{bmatrix}x’ \\ y’\end{bmatrix}$$</p><p>但你發現你旋轉完成之後圖片有點小瑕疵 （如下圖）。  </p><img src="/2020/09/16/ImageRotate/p2_1_error.png" class="" title="[有黑點的旋轉圖]"><p>會有這個原因主要是因為將原本的座標乘上旋轉矩陣之後會出現小數點，那在圖片上面的座標不會有小數點，因此我們會將小數點去除，不管是直接捨去還是四捨五入，都有可能造成某些在新圖上面的點沒有任何的原圖點對應到，為了改善這個現象，使用反向的方法來轉換。  </p><p>以前是將原圖座標轉成新圖座標，將原圖的點看要塞進新圖的哪一個位置；現在是將新圖座標轉成原圖座標，看新圖的點要拿哪一個舊圖的位置的點來填。</p><p>為了達到上述目的，我們要將公式調整一下：</p><p>$$\begin{bmatrix}cos(\theta) &amp; -sin(\theta)\\sin(\theta) &amp; cos(\theta)\end{bmatrix}^{-1}<br>\begin{bmatrix}cos(\theta) &amp; -sin(\theta)\\sin(\theta) &amp; cos(\theta)\end{bmatrix}<br>\begin{bmatrix}x \\ y\end{bmatrix}<br>= \begin{bmatrix}cos(\theta) &amp; -sin(\theta)\\sin(\theta) &amp; cos(\theta)\end{bmatrix}^{-1}\begin{bmatrix}x’ \\ y’\end{bmatrix}$$</p><p>$$\Rightarrow \begin{bmatrix}x \\ y\end{bmatrix}<br>= \begin{bmatrix}cos(\theta) &amp; -sin(\theta)\\sin(\theta) &amp; cos(\theta)\end{bmatrix}^{-1}\begin{bmatrix}x’ \\ y’\end{bmatrix}$$</p><p>那至於 $\begin{bmatrix}cos(\theta) &amp; -sin(\theta)\\sin(\theta) &amp; cos(\theta)\end{bmatrix}^{-1}$ 這是什麼東西呢？</p><p>原本的旋轉矩陣是將座標旋轉 $\theta$ 度，反矩陣就是轉反方向 $\theta$ 度。</p><p>所以<br>$$\begin{bmatrix}cos(\theta) &amp; -sin(\theta) \\ sin(\theta) &amp; cos(\theta)\end{bmatrix}^{-1} = \begin{bmatrix}cos(-\theta) &amp; -sin(-\theta) \\ sin(-\theta) &amp; cos(-\theta)\end{bmatrix} = \begin{bmatrix}cos(\theta) &amp; sin(\theta) \\ -sin(\theta) &amp; cos(\theta)\end{bmatrix}$$  </p><ul><li><strong>最終公式</strong>：</li></ul><p>$$\begin{bmatrix}x \\ y\end{bmatrix}<br>= \begin{bmatrix}cos(\theta) &amp; sin(\theta) \\ -sin(\theta) &amp; cos(\theta)\end{bmatrix}\begin{bmatrix}x’ \\ y’\end{bmatrix}$$</p><h2 id="Python-Code"><a href="#Python-Code" class="headerlink" title="Python Code"></a>Python Code</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rotate 45 degrees clockwise</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate_45</span>(<span class="params">img</span>):</span></span><br><span class="line">  <span class="comment"># create a empty image</span></span><br><span class="line">  new_img = np.zeros(img.shape, np.uint8)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># get the size of the image</span></span><br><span class="line">  H, W = img.shape[:<span class="number">2</span>]</span><br><span class="line">  H_2 = int(H/<span class="number">2</span>)</span><br><span class="line">  W_2 = int(W/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># precalculate the √2/2</span></span><br><span class="line">  sqrt_2_div_2 = math.sqrt(<span class="number">2</span>)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(H):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(W):</span><br><span class="line">      <span class="comment"># compute the location of the original image</span></span><br><span class="line">      x = int(sqrt_2_div_2*(i - H_2) - sqrt_2_div_2*(j - W_2))</span><br><span class="line">      y = int(sqrt_2_div_2*(i - H_2) + sqrt_2_div_2*(j - W_2))</span><br><span class="line">      </span><br><span class="line">      <span class="comment"># skip the location that out of the image</span></span><br><span class="line">      <span class="keyword">if</span> x + H_2 &lt; H <span class="keyword">and</span> y + W_2 &lt; W <span class="keyword">and</span> x + H_2 &gt;= <span class="number">0</span> <span class="keyword">and</span> y + W_2 &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># put the value of the location computed before to the new image location</span></span><br><span class="line">        new_img[i][j] = img[x + H_2][y + W_2]</span><br><span class="line">  <span class="keyword">return</span> new_img</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><img src="/2020/09/16/ImageRotate/lena.bmp" class="" title="[原圖]"><img src="/2020/09/16/ImageRotate/p2_1.png" class="" title="[旋轉 45 度]"><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5">https://zh.wikipedia.org/wiki/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5</a></li><li><a href="https://www.ptt.cc/bbs/C_and_CPP/M.1127828170.A.08B.html">https://www.ptt.cc/bbs/C_and_CPP/M.1127828170.A.08B.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;圖片旋轉&quot;&gt;&lt;a href=&quot;#圖片旋轉&quot; class=&quot;headerlink&quot; title=&quot;圖片旋轉&quot;&gt;&lt;/a&gt;圖片旋轉&lt;/h1&gt;&lt;p&gt;在這邊紀錄一下簡單的圖片旋轉方式。&lt;/p&gt;
&lt;h2 id=&quot;旋轉矩陣&quot;&gt;&lt;a href=&quot;#旋轉矩陣&quot; class=&quot;hea</summary>
      
    
    
    
    
    <category term="Python" scheme="http://ldslds449.github.io/tags/Python/"/>
    
    <category term="Image processing" scheme="http://ldslds449.github.io/tags/Image-processing/"/>
    
  </entry>
  
  <entry>
    <title>C++ 檢查 out of bound 工具 (Google - AddressSanitizer)</title>
    <link href="http://ldslds449.github.io/2020/09/11/AddressSanitizer/"/>
    <id>http://ldslds449.github.io/2020/09/11/AddressSanitizer/</id>
    <published>2020-09-11T05:59:47.000Z</published>
    <updated>2021-05-06T05:04:28.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>常常在寫程式的時候，發生 out of bound 都不知道，只能等到看到 Segmentation Fault 才知道錯誤。</p><p>而其中就算知道錯誤了，也找不出來錯誤在哪裡，一般都是用 <code>-g + gdb</code> 來找出錯誤的地方，但我有遇過一次是 gdb 報錯的地方在 malloc 的地方，檢查了很多遍也找不出來錯誤的地方 QAQ。</p><p>之後靠著 AddressSanitizer 才找出正確錯誤的地方。</p><h1 id="AddressSanitizer"><a href="#AddressSanitizer" class="headerlink" title="AddressSanitizer"></a>AddressSanitizer</h1><p><a href="https://github.com/google/sanitizers">[github]</a></p><p>以下使用 <code>gcc</code> 來介紹  </p><p>根據 github 說明，gcc 只要版本 &gt;= 4.8 之後就內建 AddressSanitizer，當然你要自己 build 也可以。</p><p><a href="https://docs.microsoft.com/zh-tw/cpp/build/reference/fsanitize?view=msvc-160">[Windows Visual Studio 使用說明]</a></p><p>MinGW 目前無法使用，可以用 WSL 或是 VS。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>你只需要在編譯的時候加上 <code>-fsanitize=address</code> 。</p><ul><li>確保程式的執行效率不要下降太多，建議使用 <code>-O1</code> 或者更高的最佳化。</li><li>使用 <code>-g</code> 來顯示詳細的錯誤行數。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-fsanitize=address -O2</span><br></pre></td></tr></table></figure><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><a href="/2020/09/11/AddressSanitizer/main.cpp" title="[Source code]">[Source code]</a><a href="/2020/09/11/AddressSanitizer/makefile" title="[Makefile]">[Makefile]</a><p>以下使用此指令進行編譯  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; g++ main.cpp -o exec.main -O2 -fsanitize=address -g</span><br></pre></td></tr></table></figure><h3 id="Case-1-Out-Of-Bound"><a href="#Case-1-Out-Of-Bound" class="headerlink" title="Case 1: Out Of Bound"></a>Case 1: Out Of Bound</h3><p>直接將 array a 存取第 6 個元素。</p><figure class="highlight c++"><figcaption><span>1. Out Of Bound</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">case1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* out of bound */</span></span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    a[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:  </p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==566==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffe6534a24 at pc 0x7f4c18400a7f bp 0x7fffe65349e0 sp 0x7fffe65349d0</span><br><span class="line">WRITE of size 4 at 0x7fffe6534a24 thread T0</span><br><span class="line">    #0 0x7f4c18400a7e in case1() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:8</span><br><span class="line">    #1 0x7f4c18400a7e in main /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:32</span><br><span class="line">    #2 0x7f4c16c61b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)</span><br><span class="line">    #3 0x7f4c18400ae9 in _start (/mnt/d/Blog/source/_posts/AddressSanitizer/exec.case1+0xae9)</span><br><span class="line"></span><br><span class="line">Address 0x7fffe6534a24 is located in stack of thread T0 at offset 52 in frame</span><br><span class="line">    #0 0x7f4c184008bf in main /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:30</span><br><span class="line"></span><br><span class="line">  This frame has 1 object(s):</span><br><span class="line">    [32, 52) &#x27;a&#x27; &lt;== Memory access at offset 52 overflows this variable</span><br><span class="line">HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext</span><br><span class="line">      (longjmp and C++ exceptions *are* supported)</span><br><span class="line">SUMMARY: AddressSanitizer: stack-buffer-overflow /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:8 in case1()</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x10007cc9e8f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1</span><br><span class="line">=&gt;0x10007cc9e940: f1 f1 00 00[04]f2 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07</span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">==566==ABORTING</span><br></pre></td></tr></table></figure><h3 id="Case-2-Memory-Leak"><a href="#Case-2-Memory-Leak" class="headerlink" title="Case 2: Memory Leak"></a>Case 2: Memory Leak</h3><p>malloc array a 之後，不進行釋放，馬上 return。</p><figure class="highlight c++"><figcaption><span>2. Memory Leak</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">case2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* memory leak */</span></span><br><span class="line">  <span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:  </p><p>剛好可以看到，通常一個 int 為 4 bytes，開 5 個 int 的 array，一共是 20 bytes，這邊 AddressSanitizer 有抓到 20 bytes 的 memory leak。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==568==ERROR: LeakSanitizer: detected memory leaks</span><br><span class="line"></span><br><span class="line">Direct leak of 20 byte(s) in 1 object(s) allocated from:</span><br><span class="line">    #0 0x7fd7f9f20608 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0608)</span><br><span class="line">    #1 0x7fd7fb2008bd in case2() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:16</span><br><span class="line">    #2 0x7fd7fb2008bd in main /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:34</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: 20 byte(s) leaked in 1 allocation(s).</span><br></pre></td></tr></table></figure><h3 id="Case-3-Use-After-Free"><a href="#Case-3-Use-After-Free" class="headerlink" title="Case 3: Use After Free"></a>Case 3: Use After Free</h3><p>將 array a malloc 之後，釋放並存取。</p><figure class="highlight c++"><figcaption><span>3. Use After Free</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">case3</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* use after free */</span></span><br><span class="line">  <span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">delete</span> [] a;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:  </p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==570==ERROR: AddressSanitizer: heap-use-after-free on address 0x603000000010 at pc 0x7f209ee00c35 bp 0x7ffffc73eb30 sp 0x7ffffc73eb20</span><br><span class="line">WRITE of size 4 at 0x603000000010 thread T0</span><br><span class="line">    #0 0x7f209ee00c34 in case3() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:25</span><br><span class="line">    #1 0x7f209ee008b8 in main /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:36</span><br><span class="line">    #2 0x7f209d661b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)</span><br><span class="line">    #3 0x7f209ee00909 in _start (/mnt/d/Blog/source/_posts/AddressSanitizer/exec.case3+0x909)</span><br><span class="line"></span><br><span class="line">0x603000000010 is located 0 bytes inside of 20-byte region [0x603000000010,0x603000000024)</span><br><span class="line">freed by thread T0 here:</span><br><span class="line">    #0 0x7f209db21480 in operator delete[](void*) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe1480)</span><br><span class="line">    #1 0x7f209ee00c05 in case3() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:24</span><br><span class="line"></span><br><span class="line">previously allocated by thread T0 here:</span><br><span class="line">    #0 0x7f209db20608 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0608)</span><br><span class="line">    #1 0x7f209ee00bfa in case3() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:23</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-use-after-free /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:25 in case3()</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x0c067fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x0c067fff8000: fa fa[fd]fd fd fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07</span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">==570==ABORTING</span><br></pre></td></tr></table></figure><h2 id="效能問題"><a href="#效能問題" class="headerlink" title="效能問題"></a>效能問題</h2><p>根據 <a href="https://github.com/google/sanitizers/wiki/AddressSanitizerPerformanceNumbers">AddressSanitizerPerformanceNumbers</a> 上面所測試的結果，所造成的效能下降最多可以達到 3.79 倍的時間，因此在找出 bug 之後，最好不要使用，讓程式達到最快的效率。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a href="https://stackoverflow.com/questions/37970758/how-to-use-addresssanitizer-with-gcc">https://stackoverflow.com/questions/37970758/how-to-use-addresssanitizer-with-gcc</a>  </p></li><li><p><a href="https://github.com/google/sanitizers">https://github.com/google/sanitizers</a>  </p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;常常在寫程式的時候，發生 out of bound 都不知道，只能等到看到 Segmentation Fault 才知道錯誤。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="C++" scheme="http://ldslds449.github.io/tags/C/"/>
    
    <category term="Debug" scheme="http://ldslds449.github.io/tags/Debug/"/>
    
    <category term="Tool" scheme="http://ldslds449.github.io/tags/Tool/"/>
    
  </entry>
  
</feed>
