<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>公貓</title>
  
  
  <link href="http://ldslds449.github.io/atom.xml" rel="self"/>
  
  <link href="http://ldslds449.github.io/"/>
  <updated>2020-09-13T06:34:24.516Z</updated>
  <id>http://ldslds449.github.io/</id>
  
  <author>
    <name>ldslds449</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ 檢查 out of bound 工具 (Google - AddressSanitizer)</title>
    <link href="http://ldslds449.github.io/2020/09/11/AddressSanitizer/"/>
    <id>http://ldslds449.github.io/2020/09/11/AddressSanitizer/</id>
    <published>2020-09-11T05:59:47.000Z</published>
    <updated>2020-09-13T06:34:24.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>常常在寫程式的時候，發生 out of bound 都不知道，只能等到看到 Segmentation Fault 才知道錯誤。</p><p>而其中就算知道錯誤了，也找不出來錯誤在哪裡，一般都是用 <code>-g + gdb</code> 來找出錯誤的地方，但我有遇過一次是 gdb 報錯的地方在 malloc 的地方，檢查了很多遍也找不出來錯誤的地方 QAQ。</p><p>之後靠著 AddressSanitizer 才找出正確錯誤的地方。</p><h1 id="AddressSanitizer"><a href="#AddressSanitizer" class="headerlink" title="AddressSanitizer"></a>AddressSanitizer</h1><p><a href="https://github.com/google/sanitizers">github</a></p><p>以下使用 <code>gcc</code> 來介紹  </p><p>根據 github 說明，gcc 只要版本 &gt;= 4.8 之後就內建 AddressSanitizer，當然你要自己 build 也可以。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>你只需要在編譯的時候加上 <code>-fsanitize=address</code> ，另外確保程式的執行效率不要下降太多，建議使用 <code>-O1</code> 或者更高的最佳化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-fsanitize=address -O2</span><br></pre></td></tr></table></figure><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><a href="/2020/09/11/AddressSanitizer/main.cpp" title="[Source code]">[Source code]</a><p>以下使用此指令進行編譯  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; g++ main.cpp -o exec.main -O2 -fsanitize=address</span><br></pre></td></tr></table></figure><h3 id="Case-1-Out-Of-Bound"><a href="#Case-1-Out-Of-Bound" class="headerlink" title="Case 1: Out Of Bound"></a>Case 1: Out Of Bound</h3><p>直接將 array a 存取第 6 個元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">case1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* out of bound */</span></span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    a[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==178==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffecc8e984 at pc 0x7f600b000a7f bp 0x7fffecc8e940 sp 0x7fffecc8e930</span><br><span class="line">WRITE of size 4 at 0x7fffecc8e984 thread T0</span><br><span class="line">    #0 0x7f600b000a7e in main (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0xa7e)</span><br><span class="line">    #1 0x7f6009861b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)</span><br><span class="line">    #2 0x7f600b000ae9 in _start (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0xae9)</span><br><span class="line"></span><br><span class="line">Address 0x7fffecc8e984 is located in stack of thread T0 at offset 52 in frame</span><br><span class="line">    #0 0x7f600b0008bf in main (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0x8bf)</span><br><span class="line"></span><br><span class="line">  This frame has 1 object(s):</span><br><span class="line">    [32, 52) &#x27;a&#x27; &lt;== Memory access at offset 52 overflows this variable</span><br><span class="line">HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext</span><br><span class="line">      (longjmp and C++ exceptions *are* supported)</span><br><span class="line">SUMMARY: AddressSanitizer: stack-buffer-overflow (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0xa7e) in main</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x10007d989ce0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007d989cf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007d989d00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007d989d10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007d989d20: 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00</span><br><span class="line">=&gt;0x10007d989d30:[04]f2 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007d989d40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007d989d50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007d989d60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007d989d70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007d989d80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07</span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">==178==ABORTING</span><br></pre></td></tr></table></figure><h3 id="Case-2-Memory-Leak"><a href="#Case-2-Memory-Leak" class="headerlink" title="Case 2: Memory Leak"></a>Case 2: Memory Leak</h3><p>malloc array a 之後，不進行釋放，馬上 return。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">case2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* memory leak */</span></span><br><span class="line">  <span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:  </p><p>剛好可以看到，通常一個 int 為 4 bytes，開 5 個 int 的 array，一共是 20 bytes，這邊 AddressSanitizer 有抓到 20 bytes 的 memory leak。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==186==ERROR: LeakSanitizer: detected memory leaks</span><br><span class="line"></span><br><span class="line">Direct leak of 20 byte(s) in 1 object(s) allocated from:</span><br><span class="line">    #0 0x7f241bb20608 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0608)</span><br><span class="line">    #1 0x7f241ce008bd in main (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0x8bd)</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: 20 byte(s) leaked in 1 allocation(s).</span><br></pre></td></tr></table></figure><h3 id="Case-3-Use-After-Free"><a href="#Case-3-Use-After-Free" class="headerlink" title="Case 3: Use After Free"></a>Case 3: Use After Free</h3><p>將 array a malloc 之後，釋放並存取。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">case3</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* use after free */</span></span><br><span class="line">  <span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">delete</span> [] a;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==194==ERROR: AddressSanitizer: heap-use-after-free on address 0x603000000010 at pc 0x7f5e99600c35 bp 0x7fffe4079fb0 sp 0x7fffe4079fa0</span><br><span class="line">WRITE of size 4 at 0x603000000010 thread T0</span><br><span class="line">    #0 0x7f5e99600c34 in case3() (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0xc34)</span><br><span class="line">    #1 0x7f5e996008b8 in main (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0x8b8)</span><br><span class="line">    #2 0x7f5e97e61b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)</span><br><span class="line">    #3 0x7f5e99600909 in _start (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0x909)</span><br><span class="line"></span><br><span class="line">0x603000000010 is located 0 bytes inside of 20-byte region [0x603000000010,0x603000000024)</span><br><span class="line">freed by thread T0 here:</span><br><span class="line">    #0 0x7f5e98321480 in operator delete[](void*) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe1480)</span><br><span class="line">    #1 0x7f5e99600c05 in case3() (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0xc05)</span><br><span class="line"></span><br><span class="line">previously allocated by thread T0 here:</span><br><span class="line">    #0 0x7f5e98320608 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0608)</span><br><span class="line">    #1 0x7f5e99600bfa in case3() (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0xbfa)</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-use-after-free (/mnt/d/Blog/source/code/AddressSanitizer/exec.main+0xc34) in case3()</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x0c067fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x0c067fff8000: fa fa[fd]fd fd fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07</span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">==194==ABORTING</span><br></pre></td></tr></table></figure><h2 id="效能問題"><a href="#效能問題" class="headerlink" title="效能問題"></a>效能問題</h2><p>根據 <a href="https://github.com/google/sanitizers/wiki/AddressSanitizerPerformanceNumbers">AddressSanitizerPerformanceNumbers</a> 上面所測試的結果，所造成的效能下降最多可以達到 3.79 倍的時間，因此在找出 bug 之後，最好不要使用，讓程式達到最快的效率。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a href="https://stackoverflow.com/questions/37970758/how-to-use-addresssanitizer-with-gcc">https://stackoverflow.com/questions/37970758/how-to-use-addresssanitizer-with-gcc</a>  </p></li><li><p><a href="https://github.com/google/sanitizers">https://github.com/google/sanitizers</a>  </p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;常常在寫程式的時候，發生 out of bound 都不知道，只能等到看到 Segmentation Fault 才知道錯誤。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="C++" scheme="http://ldslds449.github.io/tags/C/"/>
    
    <category term="Debug" scheme="http://ldslds449.github.io/tags/Debug/"/>
    
  </entry>
  
</feed>
