<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 檢查 out of bound 工具 (Google - AddressSanitizer)</title>
    <url>/2020/09/11/AddressSanitizer/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>常常在寫程式的時候，發生 out of bound 都不知道，只能等到看到 Segmentation Fault 才知道錯誤。</p>
<p>而其中就算知道錯誤了，也找不出來錯誤在哪裡，一般都是用 <code>-g + gdb</code> 來找出錯誤的地方，但我有遇過一次是 gdb 報錯的地方在 malloc 的地方，檢查了很多遍也找不出來錯誤的地方 QAQ。</p>
<p>之後靠著 AddressSanitizer 才找出正確錯誤的地方。</p>
<h1 id="AddressSanitizer"><a href="#AddressSanitizer" class="headerlink" title="AddressSanitizer"></a>AddressSanitizer</h1><p><a href="https://github.com/google/sanitizers">[github]</a></p>
<p>以下使用 <code>gcc</code> 來介紹  </p>
<p>根據 github 說明，gcc 只要版本 &gt;= 4.8 之後就內建 AddressSanitizer，當然你要自己 build 也可以。</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>你只需要在編譯的時候加上 <code>-fsanitize=address</code> 。</p>
<ul>
<li>確保程式的執行效率不要下降太多，建議使用 <code>-O1</code> 或者更高的最佳化。</li>
<li>使用 <code>-g</code> 來顯示詳細的錯誤行數。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-fsanitize=address -O2</span><br></pre></td></tr></table></figure>

<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><a href="/2020/09/11/AddressSanitizer/main.cpp" title="[Source code]">[Source code]</a>
<a href="/2020/09/11/AddressSanitizer/makefile" title="[Makefile]">[Makefile]</a>

<p>以下使用此指令進行編譯  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; g++ main.cpp -o exec.main -O2 -fsanitize=address -g</span><br></pre></td></tr></table></figure>

<h3 id="Case-1-Out-Of-Bound"><a href="#Case-1-Out-Of-Bound" class="headerlink" title="Case 1: Out Of Bound"></a>Case 1: Out Of Bound</h3><p>直接將 array a 存取第 6 個元素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">case1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* out of bound */</span></span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    a[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:  </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==566==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffe6534a24 at pc 0x7f4c18400a7f bp 0x7fffe65349e0 sp 0x7fffe65349d0</span><br><span class="line">WRITE of size 4 at 0x7fffe6534a24 thread T0</span><br><span class="line">    #0 0x7f4c18400a7e in case1() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:8</span><br><span class="line">    #1 0x7f4c18400a7e in main /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:32</span><br><span class="line">    #2 0x7f4c16c61b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)</span><br><span class="line">    #3 0x7f4c18400ae9 in _start (/mnt/d/Blog/source/_posts/AddressSanitizer/exec.case1+0xae9)</span><br><span class="line"></span><br><span class="line">Address 0x7fffe6534a24 is located in stack of thread T0 at offset 52 in frame</span><br><span class="line">    #0 0x7f4c184008bf in main /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:30</span><br><span class="line"></span><br><span class="line">  This frame has 1 object(s):</span><br><span class="line">    [32, 52) &#x27;a&#x27; &lt;== Memory access at offset 52 overflows this variable</span><br><span class="line">HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext</span><br><span class="line">      (longjmp and C++ exceptions *are* supported)</span><br><span class="line">SUMMARY: AddressSanitizer: stack-buffer-overflow /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:8 in case1()</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x10007cc9e8f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1</span><br><span class="line">=&gt;0x10007cc9e940: f1 f1 00 00[04]f2 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x10007cc9e990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07</span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">==566==ABORTING</span><br></pre></td></tr></table></figure>

<h3 id="Case-2-Memory-Leak"><a href="#Case-2-Memory-Leak" class="headerlink" title="Case 2: Memory Leak"></a>Case 2: Memory Leak</h3><p>malloc array a 之後，不進行釋放，馬上 return。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">case2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* memory leak */</span></span><br><span class="line">  <span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:  </p>
<p>剛好可以看到，通常一個 int 為 4 bytes，開 5 個 int 的 array，一共是 20 bytes，這邊 AddressSanitizer 有抓到 20 bytes 的 memory leak。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==568==ERROR: LeakSanitizer: detected memory leaks</span><br><span class="line"></span><br><span class="line">Direct leak of 20 byte(s) in 1 object(s) allocated from:</span><br><span class="line">    #0 0x7fd7f9f20608 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0608)</span><br><span class="line">    #1 0x7fd7fb2008bd in case2() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:16</span><br><span class="line">    #2 0x7fd7fb2008bd in main /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:34</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: 20 byte(s) leaked in 1 allocation(s).</span><br></pre></td></tr></table></figure>

<h3 id="Case-3-Use-After-Free"><a href="#Case-3-Use-After-Free" class="headerlink" title="Case 3: Use After Free"></a>Case 3: Use After Free</h3><p>將 array a malloc 之後，釋放並存取。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">case3</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* use after free */</span></span><br><span class="line">  <span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">delete</span> [] a;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:  </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==570==ERROR: AddressSanitizer: heap-use-after-free on address 0x603000000010 at pc 0x7f209ee00c35 bp 0x7ffffc73eb30 sp 0x7ffffc73eb20</span><br><span class="line">WRITE of size 4 at 0x603000000010 thread T0</span><br><span class="line">    #0 0x7f209ee00c34 in case3() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:25</span><br><span class="line">    #1 0x7f209ee008b8 in main /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:36</span><br><span class="line">    #2 0x7f209d661b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)</span><br><span class="line">    #3 0x7f209ee00909 in _start (/mnt/d/Blog/source/_posts/AddressSanitizer/exec.case3+0x909)</span><br><span class="line"></span><br><span class="line">0x603000000010 is located 0 bytes inside of 20-byte region [0x603000000010,0x603000000024)</span><br><span class="line">freed by thread T0 here:</span><br><span class="line">    #0 0x7f209db21480 in operator delete[](void*) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe1480)</span><br><span class="line">    #1 0x7f209ee00c05 in case3() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:24</span><br><span class="line"></span><br><span class="line">previously allocated by thread T0 here:</span><br><span class="line">    #0 0x7f209db20608 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0608)</span><br><span class="line">    #1 0x7f209ee00bfa in case3() /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:23</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-use-after-free /mnt/d/Blog/source/_posts/AddressSanitizer/main.cpp:25 in case3()</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x0c067fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c067fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x0c067fff8000: fa fa[fd]fd fd fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c067fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07</span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">==570==ABORTING</span><br></pre></td></tr></table></figure>

<h2 id="效能問題"><a href="#效能問題" class="headerlink" title="效能問題"></a>效能問題</h2><p>根據 <a href="https://github.com/google/sanitizers/wiki/AddressSanitizerPerformanceNumbers">AddressSanitizerPerformanceNumbers</a> 上面所測試的結果，所造成的效能下降最多可以達到 3.79 倍的時間，因此在找出 bug 之後，最好不要使用，讓程式達到最快的效率。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><p><a href="https://stackoverflow.com/questions/37970758/how-to-use-addresssanitizer-with-gcc">https://stackoverflow.com/questions/37970758/how-to-use-addresssanitizer-with-gcc</a>  </p>
</li>
<li><p><a href="https://github.com/google/sanitizers">https://github.com/google/sanitizers</a>  </p>
</li>
</ul>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Debug</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
</search>
